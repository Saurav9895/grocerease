rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserAuthenticated(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isProfileOwner(userId) {
      return isUserAuthenticated(userId);
    }
    
    function userHasRole(userId, role) {
      let userData = getUserData(userId);
      return userData != null && userData.adminRole == role;
    }

    function isMainAdmin(userId) {
      return userHasRole(userId, 'main');
    }
    
    function isAdmin(userId) {
        let userData = getUserData(userId);
        return userData != null && (userData.adminRole == 'main' || userData.adminRole == 'standard');
    }
    
    function isVendor(userId) {
        return userHasRole(userId, 'vendor');
    }

    function isDeliveryPerson(userId) {
        return userHasRole(userId, 'delivery');
    }
    
    function isStaff(userId) {
        let userData = getUserData(userId);
        return userData != null && userData.adminRole != null;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isProfileOwner(userId) || isMainAdmin(request.auth.uid);
      allow write: if isProfileOwner(userId);
      allow create: if request.auth.uid == userId;
      // Main admin can update roles
      allow update: if isProfileOwner(userId) || isMainAdmin(request.auth.uid);
    }
    
    match /products/{productId} {
        allow read: if true;
        allow create: if isVendor(request.auth.uid) && request.resource.data.vendorId == getUserData(request.auth.uid).vendorId;
        allow update: if isMainAdmin(request.auth.uid) || (isVendor(request.auth.uid) && resource.data.vendorId == getUserData(request.auth.uid).vendorId);
        allow delete: if isMainAdmin(request.auth.uid) || (isVendor(request.auth.uid) && resource.data.vendorId == getUserData(request.auth.uid).vendorId);
    }

    match /products/{productId}/reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null;
    }

    match /categories/{categoryId} {
        allow read: if true;
        allow create: if request.auth != null && (
                        isMainAdmin(request.auth.uid) || 
                        (isVendor(request.auth.uid) && request.resource.data.vendorId == getUserData(request.auth.uid).vendorId)
                      );
        allow update: if request.auth != null && (
                        isMainAdmin(request.auth.uid) ||
                        (isVendor(request.auth.uid) && resource.data.vendorId == getUserData(request.auth.uid).vendorId)
                      );
        allow delete: if request.auth != null && isMainAdmin(request.auth.uid);
    }
    
    match /attributes/{attributeId} {
        allow read: if true;
        allow create: if request.auth != null && (
                        isMainAdmin(request.auth.uid) || 
                        (isVendor(request.auth.uid) && request.resource.data.vendorId == getUserData(request.auth.uid).vendorId)
                      );
        allow update: if request.auth != null && (
                        isMainAdmin(request.auth.uid) ||
                        (isVendor(request.auth.uid) && resource.data.vendorId == getUserData(request.auth.uid).vendorId)
                      );
        allow delete: if request.auth != null && isMainAdmin(request.auth.uid);
    }

    match /orders/{orderId} {
      allow read: if request.auth != null && (
                    resource.data.userId == request.auth.uid || 
                    isStaff(request.auth.uid)
                  );
      allow create: if request.auth != null;
      allow update: if request.auth != null && isStaff(request.auth.uid);
    }
    
    match /settings/{docId} {
        allow read: if true;
        allow write: if isMainAdmin(request.auth.uid);
    }
    
    match /promocodes/{codeId} {
        allow read: if true;
        allow write: if isMainAdmin(request.auth.uid);
    }

    match /vendors/{vendorId} {
      allow read: if true;
      allow update: if request.auth != null && (
                      isMainAdmin(request.auth.uid) ||
                      (isVendor(request.auth.uid) && request.resource.data.ownerId == request.auth.uid)
                    );
      allow create: if request.auth != null && isMainAdmin(request.auth.uid);
    }
  }
}