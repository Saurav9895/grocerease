
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getRequestingUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isRole(role) {
      return isSignedIn() && getRequestingUserData().adminRole == role;
    }

    function isAnyAdmin() {
      return isRole('main') || isRole('standard');
    }
    
    function isVendor() {
      return isRole('vendor');
    }

    function isDeliveryPerson() {
      return isRole('delivery');
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow read, update: if isSignedIn() && request.auth.uid == userId;
      allow create: if true;
      // Main admin can manage roles
      allow update: if isRole('main') && request.resource.data.diff(resource.data).affectedKeys().hasAny(['adminRole', 'vendorId']);
    }

    match /products/{productId} {
      allow read: if true;
      allow create: if isVendor();
      allow update, delete: if isAnyAdmin() || (isVendor() && getRequestingUserData().vendorId == resource.data.vendorId);
      
      // Reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      }
    }
    
    match /categories/{categoryId} {
      allow read: if true;
      allow create: if isAnyAdmin() || (isVendor() && request.resource.data.vendorId == getRequestingUserData().vendorId);
      allow update, delete: if isAnyAdmin() || (isVendor() && resource.data.vendorId == getRequestingUserData().vendorId);
    }
    
    match /attributes/{attributeId} {
      allow read: if true;
      allow create: if isAnyAdmin() || (isVendor() && request.resource.data.vendorId == getRequestingUserData().vendorId);
      allow update, delete: if isAnyAdmin() || (isVendor() && resource.data.vendorId == getRequestingUserData().vendorId);
    }

    match /orders/{orderId} {
      allow read: if isSignedIn() && (
                    request.auth.uid == resource.data.userId || 
                    isAnyAdmin() ||
                    (isDeliveryPerson() && resource.data.deliveryPersonId == request.auth.uid) ||
                    (isVendor() && getRequestingUserData().vendorId in resource.data.vendorIds)
                  );
                  
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      allow update: if 
        // Admins can update orders
        isAnyAdmin() ||
        // Vendors can update delivery person details and status, but only for orders they are part of.
        ( isVendor() && 
          (getRequestingUserData().vendorId in resource.data.vendorIds) &&
          request.resource.data.diff(resource.data).affectedKeys().hasAny(['deliveryPersonId', 'deliveryPersonName', 'status'])
        ) ||
        // Delivery person can update status for their assigned orders.
        ( isDeliveryPerson() &&
          resource.data.deliveryPersonId == request.auth.uid &&
          (
            (request.resource.data.status == 'Delivered' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'deliveredAt', 'paymentSubmitted'])) ||
            (request.resource.data.status == 'Shipped' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'deliveryOtp']))
          )
        );
    }
    
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isRole('main');
    }
    
    match /promocodes/{code} {
      allow read: if true;
      allow write: if isRole('main');
    }

    match /vendors/{vendorId} {
      allow read: if true;
      allow create: if false; // Only created via AdminManager
      allow update: if isAnyAdmin() || (isVendor() && getRequestingUserData().uid == resource.data.ownerId);
    }
  }
}
