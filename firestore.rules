rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // By default, deny all reads and writes unless a rule allows it.
    match /{document=**} {
      allow read, write: if false;
    }
    
    // --- Helper Functions ---
    function isAdmin() {
      return request.auth.uid != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRole != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAuthenticated() {
        return request.auth.uid != null;
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow create: if isAuthenticated();
      // A user can read/update/delete their own document. An admin can do the same to any user document.
      allow read, update, delete: if isOwner(userId) || isAdmin();
    }

    match /products/{productId} {
      allow read: if true;
      // Admins can create and delete products.
      allow create, delete: if isAdmin();
      // This rule allows authenticated users to update products.
      // This is required for the client-side transaction that decrements stock when an order is placed.
      // For higher security, this logic should be moved to a server-side Cloud Function.
      allow update: if isAdmin() || isAuthenticated();
    }
    
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin(); // Create, update, delete
    }
    
    match /attributes/{attributeId} {
      allow read: if true;
      allow write: if isAdmin(); // Create, update, delete
    }

    match /products/{productId}/reviews/{reviewId} {
      allow read: if true;
      // A user can create a review if they are authenticated and the review is for them.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    match /orders/{orderId} {
      // A user can create an order for themselves.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // A user can read their own order. An admin can read any order.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Only an admin can update an order (e.g., change status).
      allow update: if isAdmin();
      // Nobody can delete orders from the app for data integrity.
      allow delete: if false;
    }
    
    // Settings can be read by anyone, but only changed by a main admin.
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRole == 'main';
    }
    
    // Promo codes can be read by anyone, but only changed by a main admin.
    match /promocodes/{promoCode} {
      allow read: if true;
      allow write: if isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRole == 'main';
    }
  }
}
