rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRole == 'main' || 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRole == 'standard';
    }

    function isMainAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRole == 'main';
    }

    function isDeliveryPerson() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRole == 'delivery';
    }

    // Rules for User Profiles
    match /users/{userId} {
      // Any authenticated user can create their own profile during signup
      allow create: if isUserAuthenticated();
      
      // A user can read, update their own profile data (name, phone, addresses)
      allow read, update: if isUser(userId) || isMainAdmin();
      
      // Only the main admin can delete a user (or change their admin role)
      allow delete: if isMainAdmin();
    }
    
    // Rules for Products, Categories, Attributes
    match /{collection}/{docId} 
    where collection in ['products', 'categories', 'attributes', 'promocodes'] {
      // Anyone can read products, categories, etc.
      allow read: if true;
      
      // Only admins can create, update, delete them
      allow create, update, delete: if isAdmin();
    }

    // Rules for Product Reviews
    match /products/{productId}/reviews/{reviewId} {
        // Anyone can read reviews
        allow read: if true;
        // Only authenticated users can create a review
        allow create: if isUserAuthenticated();
        // Users cannot update or delete reviews
        allow update, delete: if false;
    }
    
    // Rules for Orders
    match /orders/{orderId} {
      // An authenticated user can create an order for themselves
      allow create: if isUser(request.resource.data.userId);

      // An authenticated user can read their own order
      // An admin can read any order
      // A delivery person can read an order assigned to them
      allow read: if isUser(request.resource.data.userId) || 
                     isAdmin() || 
                     (isDeliveryPerson() && resource.data.deliveryPersonId == request.auth.uid);
      
      // An admin can update any order (e.g., change status, assign delivery)
      // A delivery person can update the status, otp, deliveredAt, and paymentSubmitted fields of an order assigned to them
      allow update: if isAdmin() || 
                       (isDeliveryPerson() && 
                        request.auth.uid == resource.data.deliveryPersonId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'deliveryOtp', 'deliveredAt', 'paymentSubmitted']));

      // Only an admin can delete an order
      allow delete: if isAdmin();
    }
    
    // Rules for general app settings
    match /settings/{settingId} {
      // Anyone can read settings
      allow read: if true;
      // Only the main admin can change settings
      allow write: if isMainAdmin();
    }
  }
}
