
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function userExists() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRole;
    }

    function isStandardAdmin() {
      return userExists() && getRole() == 'standard';
    }

    function isMainAdmin() {
      return userExists() && getRole() == 'main';
    }

    function isAdmin() {
      return isMainAdmin() || isStandardAdmin();
    }

    // Products can be read by anyone, but only written by admins.
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
      
      // Reviews can be written by any authenticated user, read by anyone.
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if false; // For simplicity, no updates/deletes for now
      }
    }

    // Categories can be read by anyone, but only written by admins.
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Promo codes can be read by authenticated users, written only by main admin
    match /promocodes/{promoCode} {
        allow read: if request.auth != null;
        allow write: if isMainAdmin();
    }

    // Users collection rules
    match /users/{userId} {
      // User can read/update their own profile, main admin can manage any profile
      allow read, update: if request.auth.uid == userId || isMainAdmin();
      // Allow any authenticated user to create their own user document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Only main admins can delete users
      allow delete: if isMainAdmin();
    }
    
    // Orders collection rules
    match /orders/{orderId} {
      allow create: if request.auth != null;
      // An order can be read by its owner OR by any admin.
      // This rule works for both single doc `get` and collection `list` (queries).
      // For queries, the query itself must be constrained to what the rule allows
      // (e.g., a user querying for their own orders).
      allow read: if (request.auth.uid == resource.data.userId) || isAdmin();
      
      // Only admins can update (e.g., change status) or delete orders.
      allow update, delete: if isAdmin();
    }
    
    // Store settings can only be managed by the main admin
    match /settings/{settingId} {
        allow read: if true; // All users need to read delivery settings
        allow write: if isMainAdmin();
    }
  }
}
