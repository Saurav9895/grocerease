
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthed() {
      return request.auth != null;
    }

    function getUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function getUserData() {
      return getUserDoc().data;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasRole(role) {
      return isAuthed() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && getUserData().adminRole == role;
    }

    // --- Collection Rules ---

    match /products/{productId} {
      allow read;
      allow write: if hasRole('main') || hasRole('standard') ||
                     (hasRole('vendor') && request.resource.data.vendorId == getUserData().vendorId);
    }

    match /categories/{categoryId} {
      allow read;
      allow create: if hasRole('main') || (hasRole('vendor') && request.resource.data.vendorId == getUserData().vendorId);
      allow update, delete: if hasRole('main') || (hasRole('vendor') && resource.data.vendorId == getUserData().vendorId);
    }

    match /attributes/{attributeId} {
      allow read;
      allow create: if hasRole('main') || (hasRole('vendor') && request.resource.data.vendorId == getUserData().vendorId);
      allow update, delete: if hasRole('main') || (hasRole('vendor') && resource.data.vendorId == getUserData().vendorId);
    }

    match /orders/{orderId} {
      allow create: if isAuthed();

      // Check if the current user is a vendor for the order being accessed.
      function isVendorForThisOrder() {
        return hasRole('vendor') &&
               'vendorIds' in resource.data &&
               getUserData().vendorId in resource.data.vendorIds;
      }

      allow read: if isOwner(resource.data.userId) || hasRole('main') || hasRole('standard') || hasRole('delivery') || isVendorForThisOrder();
      
      // Allow admins and delivery people to update.
      // Allow vendors to update IF they are part of the order.
      allow update: if hasRole('main') || hasRole('standard') || hasRole('delivery') || isVendorForThisOrder();
    }

    match /promocodes/{promoId} {
      allow read;
      allow write: if hasRole('main');
    }

    match /settings/{settingId} {
      allow read;
      allow write: if hasRole('main');
    }

    match /vendors/{vendorId} {
      allow read;
      // Main admin creates vendors by assigning the 'vendor' role to a user.
      allow create: if hasRole('main');
      // Vendor can update their own profile.
      allow update: if hasRole('main') || (hasRole('vendor') && resource.id == getUserData().vendorId);
    }

    match /users/{userId} {
      allow create: if isOwner(userId);
      // Users can manage their own profile. Main admin can read/update any profile.
      allow read, update: if isOwner(userId) || hasRole('main');
    }

    match /products/{productId}/reviews/{reviewId} {
      allow read;
      allow create: if isAuthed();
    }
  }
}
